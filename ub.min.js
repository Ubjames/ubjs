function getYears(t = 1850, n = new Date().getFullYear()) { if (t > n) throw Error("End date cannot be less than start date"); let i = []; for (; t != n + 1;)i.push(t), t++; return i } function getMonths(t = !1) { return t ? ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"] : ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] } function getWeekDays(t = !1) { return t ? ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"] : ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"] } function commarize(t) { let n = ""; n = t.toString().search(/\./) > 0 ? "." + t.split(".").at(-1) : "", t = 0 > t.toString().search(/\./) ? t.toString().split("") : t.toString().split(".")[0]; let i = [], r = 1; for (let o = t.length - 1; o >= 0; o--)i.unshift(t[o]), r % 3 == 0 && 0 != o && i.unshift(","), r++; return n.length < 1 ? i.join("") : i.join("") + n } function inWords(t, n = "") { let i = "", r = { once: ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"], tens: ["", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"], teens: ["ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"], units: [n, "thousand", "million", "billion", "trillion", "quadrillion", "quintillion", "sextillion", "septillion", "octillion", "nonillion", "decillion", "undecillion", "duodecillion", "tredecillion", "quattuordecillion", "quindecillion", "sexdecillion", "septemdecillion", "octodecillion", "novemdecillion", "vigintillion", "unvigintillion", "duovigintillion", "trevigintillion", "quattuorvigintillion", "quinvigintillion", "sexvigintillion", "septvigintillion", "octovigintillion", "nonvigintillion", "trigintillion", "untrigintillion", "duotrigintillion"] }, o = commarize(`${t}`).split(","), l, u; if (o.length > 1) console.log(o), o.forEach((t, n, o) => { switch (l = r.units[o.length - n - 1], t.length) { case 3: a(t) || (c(t) ? g(t) ? (u = 0 === n ? l : r.units[r.units.indexOf(l)], i += r.once[t[0]] + " hundred " + u + " ") : h(t[1] + t[2]) ? (u = 0 === n ? l : r.units[r.units.indexOf(l)], i += "0" == t[2] ? r.once[t[0]] + " hundred and " + r.teens[t[2]] : r.once[t[0]] + " hundred and " + r.teens[t[2]] + " " + u + " ") : (u = 0 === n ? l : r.units[r.units.indexOf(l)], i += r.once[t[0]] + " hundred and " + r.tens[t[1]] + " " + u + " ") : d(t) ? (u = 0 === n ? l : r.units[r.units.indexOf(l)], i += r.once[t[0]] + " hundred and " + r.once[t[2]] + " " + u + " ") : h(t[1] + t[2]) ? (u = 0 === n ? l : r.units[r.units.indexOf(l)], i += "0" == t[2] ? r.once[t[0]] + " hundred and " + r.teens[t[2]] : r.once[t[0]] + " hundred and " + r.teens[t[2]] + " " + u + " ") : (u = 0 === n ? l : r.units[r.units.indexOf(l)], i += r.once[t[0]] + " hundred and " + r.tens[t[1]] + "-" + r.once[t[2]] + " " + u + " ")), i += r.once[t[0]] + " " + r.once[t[1]] + " " + r.once[t[2]] + " "; break; case 2: a(t) ? i += r.once[t[0]] + " " + r.once[t[1]] + " " : h(t) ? (u = 0 === n ? l : r.units[r.units.indexOf(l)], i += "0" == t[0] ? r.teens[t[1]] : r.teens[t[1]] + " " + u + " ") : (u = 0 === n ? l : r.units[r.units.indexOf(l)], i += r.tens[t[0]] + "-" + r.once[t[1]] + " " + u + " "); break; case 1: u = 0 === n ? l : r.units[r.units.indexOf(l)], i += r.once[t[0]] + " " + u + " " } }); else { let s = o.at(-1).split(""); switch (s.length) { case 3: i = a(s.join("")) ? r.once[s[0]] + " " + r.once[s[1]] + " " + r.once[s[2]] : c(s.join("")) ? g(s.join("")) ? r.once[s[0]] + " hundred" : h(s[1] + s[2]) ? (s[2], r.once[s[0]] + " hundred and " + r.teens[s[2]]) : r.once[s[0]] + " hundred and " + r.tens[s[1]] : d(s.join("")) ? r.once[s[0]] + " hundred and " + r.once[s[2]] : h(s[1] + s[2]) ? (s[2], r.once[s[0]] + " hundred and " + r.teens[s[2]]) : r.once[s[0]] + " hundred and " + r.tens[s[1]] + "-" + r.once[s[2]]; break; case 2: i = a(s.join("")) ? r.once[s[0]] + " " + r.once[s[1]] : h(s.join("")) ? (s[0], r.teens[s[1]]) : r.tens[s[0]] + "-" + r.once[s[1]]; break; case 1: i = r.once[s[0]] } } function a(t) { return "0" == t.toString()[0] } function c(t) { return "0" == (t = t.toString())[t.length - 1] } function d(t) { return "0" == t.toString().slice(1, -1) } function h(t) { return 2 == (t = t.toString()).length && "1" == t[0] } function g(t) { return 3 == (t = t.toString()).length && "00" == t.slice(1) } return i } Object.prototype.isEmpty = function () { let t = []; for (key in this) Object.hasOwnProperty.apply(this, [key]) && t.push(key); return 0 === t.length }, String.prototype.capitalizeFirstLetters = function () { return this.replace(/\w\S*/g, t => t.charAt(0).toUpperCase() + t.slice(1).toLowerCase()) }, String.prototype.capitalizeFirstLetter = function () { return this.charAt(0).toUpperCase() + this.slice(1) }, Array.prototype.shuffle = function () { let t = this.length, n; for (; 0 != t;)n = Math.floor(Math.random() * t), t--, [this[t], this[n]] = [this[n], this[t]]; return this }, Array.prototype.moveBackward = function () { return this.push(this.shift()), this }, Array.prototype.moveForward = function () { return this.unshift(this.pop()), this }; const createElement = (t, n, i = !1) => { let { nodeName: r = "div", ...o } = t, l = document.createElement(r); return Object.entries(o).forEach(([t, n]) => { l[t] = n }), i ? n.prepend(l) : n.append(l), l }, IsJsonString = t => { try { JSON.parse(t) } catch (n) { return !1 } return !0 }; function objIsEmpty(t) { return !!t && 0 === Object.keys(t).length && Object.getPrototypeOf(t) === Object.prototype } function isObject(t) { return !("object" != typeof t || Array.isArray(t)) && null !== t } const regexValidation = (t, n) => { n.test(t.key) || (t.preventDefault(), t.stopPropagation()) }, getAccurateGreeting = () => { let t = new Date; return 12 > t.getHours() ? "Good Morning" : t.getHours() > 12 && 17 > t.getHours() ? "Good Afternoon" : "Good Evening" }, isValidEmail = t => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(t); function charFormatter(t, n = 4, i = "") { let r = [...t], o = 0, l = ""; for (; o < r.length;)0 !== o && o % n == 0 && (l += i), l += r[o], o++; return l } const insertTextSeperator = (t, n) => { let { separator: i = " ", inPosition: r = 4, onEvent: o = "object" == typeof t && void 0 !== t.target } = n, l = t; if (o) { if (t.inputType && "deleteContentBackward" === t.inputType || t.nativeEvent.inputType && "deleteContentBackward" === t.nativeEvent.inputType) return t.target.value; l = t.target.value } let u = [...l.replaceAll(RegExp("[^a-zA-Z0-9 ]|" + i, "g"), "")], s = 0, a = ""; for (; s < u.length;)s % r == 0 && 0 !== s && (a += i), a += u[s], s++; return a }; var pvi = { handleInputs(t) { if (e = window.event, t || (t = e.target), !/^[0-9]*$/.test(t.value)) return t.value = ""; if (1 === t.value.length) { if (!t.nextElementSibling) return; t.nextElementSibling.focus() } }, handlePaste(t) { (t = window.event).stopPropagation(), t.preventDefault(); let n = (t.clipboardData || window.clipboardData).getData("Text"); if (Number.isInteger(+n)) { let i = n.toString(); if (i.length > 0) { let r = i.split(""), o = t.target.parentElement.children; for (let l = 0; l < r.length && (o[l].value = r[l], o[l].focus(), l !== o.length - 1); l++); } } }, handleArrowMovement(t) { let n = window.event; if (37 === n.keyCode) { if (!t.previousElementSibling) return; t.previousElementSibling.focus(), t.selectionStart = t.selectionEnd = t.value.length } else if (39 === n.keyCode) { if (!t.nextElementSibling) return; t.nextElementSibling.focus() } if (8 === n.keyCode) { if (n.preventDefault(), !t.previousElementSibling) return t.value = ""; t.value = "", t.previousElementSibling.focus() } else if (46 === n.keyCode) { if (n.preventDefault(), !t.nextElementSibling) return t.value = ""; t.value = "", t.nextElementSibling.focus() } } }; const getMonthName = t => { switch (t) { case 1: return "January"; case 2: return "February"; case 3: return "March"; case 4: return "April"; case 5: return "May"; case 6: return "June"; case 7: return "July"; case 8: return "August"; case 9: return "September"; case 10: return "October"; case 11: return "Novemeber"; case 12: return "December" } }, formatDateWithMonthName = t => { if (!t) return ""; let n = new Date(t), i = n.getFullYear(), r = n.getMonth() + 1, o = `${n.getDate().toString().padStart(2, "0")} ${getMonthName(r)}, ${i}`; return o }; function $(t = "", n = !1) { return n ? document.querySelectorAll(t) : document.querySelector(t) }